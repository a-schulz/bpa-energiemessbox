[
    {
        "id": "88c44cb39fbde178",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f10365e5b267c145",
        "type": "mqtt-broker",
        "name": "MQTT Chat",
        "broker": "141.56.229.204",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7a775fec8e597a77",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.150.9",
        "port": 1883,
        "clientid": "nodeRed",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "837867b2b71fb692",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "1698a3fadda02d7c",
        "type": "websocket-client",
        "path": "wss://192.168.130.2:8083/rest/socket",
        "tls": "837867b2b71fb692",
        "wholemsg": "false",
        "hb": "0",
        "subprotocol": "",
        "headers": []
    },
    {
        "id": "602fcdc3e4666768",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "33c1b54c8766cf35",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9992f3594f79655f",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "991f803c221f9b09",
        "type": "ui_group",
        "name": "Standard",
        "tab": "33c1b54c8766cf35",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "958ac685fa151a91",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://141.56.229.204:4840/opcuatest/server/",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "367c16f31699de77",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "825a8a13d1d72f3c",
        "type": "ui_group",
        "name": "Default",
        "tab": "367c16f31699de77",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "78a6af48ddc3204b",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.14.231:4840",
        "secpol": "None",
        "secmode": "None",
        "none": true,
        "login": false,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "be35e6fcad5f3416",
        "type": "comment",
        "z": "88c44cb39fbde178",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "46bb9b69af58e65b",
        "type": "inject",
        "z": "88c44cb39fbde178",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "d64da7fd7164e496",
                "638213964e7948db"
            ]
        ]
    },
    {
        "id": "d64da7fd7164e496",
        "type": "OpcUa-Item",
        "z": "88c44cb39fbde178",
        "item": "ns=2;s=|var|CECC-LK.Application.GVL.rPressure",
        "datatype": "Double",
        "value": "",
        "name": "",
        "x": 280,
        "y": 460,
        "wires": [
            [
                "1d53064a2391df21"
            ]
        ]
    },
    {
        "id": "1d53064a2391df21",
        "type": "OpcUa-Client",
        "z": "88c44cb39fbde178",
        "endpoint": "78a6af48ddc3204b",
        "action": "subscribe",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": "50",
        "timeUnit": "ms",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "setstatusandtime": false,
        "keepsessionalive": false,
        "name": "",
        "x": 500,
        "y": 460,
        "wires": [
            [
                "6df5120958e22792"
            ],
            [],
            []
        ]
    },
    {
        "id": "638213964e7948db",
        "type": "OpcUa-Item",
        "z": "88c44cb39fbde178",
        "item": "ns=2;s=|var|CECC-LK.Application.GVL.rFlow",
        "datatype": "Double",
        "value": "",
        "name": "",
        "x": 280,
        "y": 540,
        "wires": [
            [
                "d7e2c7ec8f999b1a"
            ]
        ]
    },
    {
        "id": "d7e2c7ec8f999b1a",
        "type": "OpcUa-Client",
        "z": "88c44cb39fbde178",
        "endpoint": "78a6af48ddc3204b",
        "action": "subscribe",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": "50",
        "timeUnit": "ms",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "useTransport": false,
        "maxChunkCount": 1,
        "maxMessageSize": 8192,
        "receiveBufferSize": 8192,
        "sendBufferSize": 8192,
        "setstatusandtime": false,
        "keepsessionalive": false,
        "name": "",
        "x": 500,
        "y": 540,
        "wires": [
            [
                "416c851781cab3f2"
            ],
            [],
            []
        ]
    },
    {
        "id": "416c851781cab3f2",
        "type": "function",
        "z": "88c44cb39fbde178",
        "name": "Nachricht Luftfluss",
        "func": "msg.method = \"PATCH\";\nmsg.topic=\"airflow\";\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\nmsg.payload = JSON.stringify(String(msg.payload));\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 520,
        "wires": [
            [
                "465e28ca6c272d63",
                "a81f470107faf233"
            ]
        ]
    },
    {
        "id": "465e28ca6c272d63",
        "type": "http request",
        "z": "88c44cb39fbde178",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://aas-env:8081/submodels/aHR0cHM6Ly9leGFtcGxlLmNvbS9pZHMvc20vNTQ2NV83MDAzXzQwNTJfMTg4Mw/submodel-elements/Airflow/$value",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1010,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "ec59f9db783d0629",
        "type": "http request",
        "z": "88c44cb39fbde178",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://aas-env:8081/submodels/aHR0cHM6Ly9leGFtcGxlLmNvbS9pZHMvc20vNTQ2NV83MDAzXzQwNTJfMTg4Mw/submodel-elements/Pressure/$value",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1010,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "6df5120958e22792",
        "type": "function",
        "z": "88c44cb39fbde178",
        "name": "Nachricht Druck",
        "func": "msg.method = \"PATCH\";\nmsg.topic = \"pressure\";\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\nmsg.payload = JSON.stringify(String(msg.payload));\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 460,
        "wires": [
            [
                "ec59f9db783d0629",
                "a81f470107faf233"
            ]
        ]
    },
    {
        "id": "043844d2c9562eb4",
        "type": "websocket out",
        "z": "88c44cb39fbde178",
        "name": "",
        "server": "",
        "client": "1698a3fadda02d7c",
        "x": 780,
        "y": 1020,
        "wires": []
    },
    {
        "id": "8be755b20104ea48",
        "type": "websocket in",
        "z": "88c44cb39fbde178",
        "name": "",
        "server": "",
        "client": "1698a3fadda02d7c",
        "x": 260,
        "y": 940,
        "wires": [
            [
                "4f3b794f49c6dc70"
            ]
        ]
    },
    {
        "id": "096686c8c11621bc",
        "type": "inject",
        "z": "88c44cb39fbde178",
        "name": "Positionsdaten abfragen",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "8",
        "topic": "",
        "payload": "{ \"topic\":\"REGISTER\", \"payload\":[\"POSITIONS\"] }",
        "payloadType": "json",
        "x": 330,
        "y": 1020,
        "wires": [
            [
                "043844d2c9562eb4"
            ]
        ]
    },
    {
        "id": "4f3b794f49c6dc70",
        "type": "function",
        "z": "88c44cb39fbde178",
        "name": "Positionsdaten auslesen",
        "func": "const targetAddress = \"8121069331292357553\";\n\n// Wenn payload ein String ist → JSON parsen\nlet data;\nmsg.topic=\"coordinates\"\ntry {\n    data = (typeof msg.payload === \"string\") ? JSON.parse(msg.payload) : msg;\n} catch (e) {\n    node.error(\"Ungültiges JSON: \" + e.message);\n    msg.payload=null;\n    return msg;\n}\n\n// Sonderfall: AUTHORIZE_RESP prüfen\nif (\n    data.topic === \"AUTHORIZE_RESP\" &&\n    data.payload &&\n    typeof data.payload.message === \"string\" &&\n    typeof data.payload.code === \"number\"\n) {\n    msg.payload=data.payload.message\n    return msg;\n}\n\n// Normalfall: POSITIONS-Daten verarbeiten\nif (Array.isArray(data.payload)) {\n    const matching = data.payload\n        .filter(p => p.address === targetAddress)\n        .map(p => ({\n            x: p.x,\n            y: p.y,\n            z: p.z\n        }));\n\n    msg.payload=matching\n    return msg;\n} else {\n    node.warn(\"data.payload ist kein Array\");\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 940,
        "wires": [
            [
                "a81f470107faf233"
            ]
        ]
    },
    {
        "id": "9ed0b7a61bed4ee4",
        "type": "inject",
        "z": "88c44cb39fbde178",
        "name": "API Key jede 55min abfragen",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3300",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 210,
        "y": 1220,
        "wires": [
            [
                "433d3cd171a532a9"
            ]
        ]
    },
    {
        "id": "8e4eb36b2d79edac",
        "type": "http request",
        "z": "88c44cb39fbde178",
        "name": "API Key request",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://192.168.130.2:8083/rest/oauth/authorization/unauth-token",
        "tls": "837867b2b71fb692",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 1220,
        "wires": [
            [
                "b6f196b73412f6c9"
            ]
        ]
    },
    {
        "id": "433d3cd171a532a9",
        "type": "function",
        "z": "88c44cb39fbde178",
        "name": "body",
        "func": "msg.headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n};\n\nmsg.payload =\n    \"grant_type=password\" +\n    \"&client_id=3039379a-119f-467c-8f94-6ea02b764b99\" +\n    \"&username=zigpos\" +\n    \"&password=zigpos\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1220,
        "wires": [
            [
                "8e4eb36b2d79edac"
            ]
        ]
    },
    {
        "id": "b6f196b73412f6c9",
        "type": "function",
        "z": "88c44cb39fbde178",
        "name": "extract API Key",
        "func": "const token = msg.payload.access_token;\n\nmsg.payload = {\n    topic: \"AUTHORIZE\",\n    payload: token\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1220,
        "wires": [
            [
                "043844d2c9562eb4"
            ]
        ]
    },
    {
        "id": "a81f470107faf233",
        "type": "join",
        "z": "88c44cb39fbde178",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "0.5",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1090,
        "y": 640,
        "wires": [
            [
                "0f584962471c61cf"
            ]
        ]
    },
    {
        "id": "0f584962471c61cf",
        "type": "function",
        "z": "88c44cb39fbde178",
        "name": "Nachricht an Drools zusammenbauen",
        "func": "let data = msg.payload;\nconsole.log(data);\n\n// Vorherige Koordinaten aus dem Flow-Kontext holen\nlet previousPosition = flow.get(\"letzteKoordinaten\") || null;\n\n// Neues Payload-Objekt vorbereiten\nmsg.payload = {\n    airData: {},\n    positionData: previousPosition // Default: alte Koordinaten übernehmen\n};\n\n// === AIR DATA ===\nmsg.payload.airData.pressure = (data.hasOwnProperty(\"pressure\") && data.pressure)\n    ? parseFloat(JSON.parse(data.pressure))\n    : null;\n\nmsg.payload.airData.airflow = (data.hasOwnProperty(\"airflow\") && data.airflow)\n    ? parseFloat(JSON.parse(data.airflow))\n    : null;\n\n// === POSITION DATA ===\nif (Array.isArray(data.coordinates) && data.coordinates.length > 0) {\n    let last = data.coordinates[data.coordinates.length - 1];\n\n    if (last && last.hasOwnProperty(\"x\") && last.hasOwnProperty(\"y\") && last.hasOwnProperty(\"z\")) {\n        msg.payload.positionData = {\n            x: last.x,\n            y: last.y,\n            z: last.z\n        };\n\n        // Neue Koordinaten im Flow-Kontext speichern\n        flow.set(\"letzteKoordinaten\", msg.payload.positionData);\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 640,
        "wires": [
            [
                "0044dc15d17aa8f5"
            ]
        ]
    },
    {
        "id": "0044dc15d17aa8f5",
        "type": "http request",
        "z": "88c44cb39fbde178",
        "name": "Drools request",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://drools:8080/BPA",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1620,
        "y": 640,
        "wires": [
            [
                "e15d6bc061722bbb",
                "97847314590ae81d",
                "b9c71f6d3bde918a"
            ]
        ]
    },
    {
        "id": "e15d6bc061722bbb",
        "type": "function",
        "z": "88c44cb39fbde178",
        "name": "isPersonInArea",
        "func": "msg.payload = String(msg.payload.personInArea);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 600,
        "wires": [
            [
                "28ac71f3c9b3da68"
            ]
        ]
    },
    {
        "id": "28ac71f3c9b3da68",
        "type": "mqtt out",
        "z": "88c44cb39fbde178",
        "name": "",
        "topic": "personInArea",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "602fcdc3e4666768",
        "x": 2180,
        "y": 500,
        "wires": []
    },
    {
        "id": "354c9cf89ce82ab8",
        "type": "http request",
        "z": "88c44cb39fbde178",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://aas-env:8081/submodels/aHR0cHM6Ly9leGFtcGxlLmNvbS9pZHMvc20vNTQ2NV83MDAzXzQwNTJfMTg4Mw/submodel-elements/failure/$value",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2170,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "97847314590ae81d",
        "type": "function",
        "z": "88c44cb39fbde178",
        "name": "isMalfunction",
        "func": "msg.method = \"PATCH\";\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\nmsg.payload = JSON.stringify(String(msg.payload.hasMalfunction));\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 680,
        "wires": [
            [
                "354c9cf89ce82ab8"
            ]
        ]
    },
    {
        "id": "694bf0179bae2ac8",
        "type": "debug",
        "z": "88c44cb39fbde178",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2360,
        "y": 300,
        "wires": []
    },
    {
        "id": "9182cb9073332cd8",
        "type": "mqtt in",
        "z": "88c44cb39fbde178",
        "name": "",
        "topic": "personInArea",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "602fcdc3e4666768",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2130,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "b9c71f6d3bde918a",
        "type": "debug",
        "z": "88c44cb39fbde178",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1760,
        "y": 760,
        "wires": []
    },
    {
        "id": "ec9e77d51516b31c",
        "type": "change",
        "z": "88c44cb39fbde178",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 800,
        "wires": [
            []
        ]
    }
]